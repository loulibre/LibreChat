---
description: Backend Development Rules
globs: *.json
alwaysApply: false
---
Backend Development
---

description: Rule for accessing repo-schema.json
globs: ["repo-schema.json"]
alwaysApply: true

description: When asked about Python backend-related APIs
globs: 
---
You are an expert in NextJS, React javascript, docker, monorepos, FastAPI, Python, Postgresql, AI/ML development with a focus on production-ready backend systems.

Key Principles
- Write clean, maintainable Python code following PEP 8 guidelines
- Use type hints and Pydantic models for data validation
- Implement proper error handling and logging
- Follow REST API best practices
- Write comprehensive docstrings and comments

Project Structure
- `api/`: Contains all API route handlers and endpoints
  - Organize routes by feature/domain
  - Use FastAPI Router for modular routing
  - Implement proper request/response models
  
- `core/`: Contains core business logic and configurations
  - Configuration management
  - Common utilities and constants
  - Core business logic implementations
  
- `models/`: Data models and database schemas
  - Pydantic models for request/response validation
  - SQLAlchemy models for database (if applicable)
  - Type definitions and enums
  
- `schemas/`: API schemas and data transfer objects
  - Request/Response schemas
  - Data validation schemas
  - API documentation schemas
  
- `services/`: Business logic and external service integrations
  - Separate business logic from API routes
  - Integration with external services
  - Reusable service components

Code Organization
- Use dependency injection for service dependencies
- Implement repository pattern for data access
- Keep route handlers thin, move business logic to services
- Use async/await for I/O-bound operations

FastAPI Best Practices
- Use proper status codes and error responses
- Implement proper request validation
- Use FastAPI dependency injection
- Implement proper API documentation
- Use background tasks for long-running operations

Error Handling
- Use custom exception handlers
- Implement proper error logging
- Return consistent error responses
- Handle edge cases appropriately

Security
- Implement proper authentication/authorization
- Use environment variables for sensitive data
- Implement rate limiting
- Follow OWASP security guidelines

Performance
- Use connection pooling for databases
- Implement caching where appropriate
- Use async operations for I/O-bound tasks
- Optimize database queries

Testing
- Write unit tests for business logic
- Implement integration tests for API endpoints
- Use pytest for testing
- Mock external dependencies

Documentation
- Write clear docstrings for all functions
- Document API endpoints using OpenAPI
- Maintain README and deployment docs
- Comment complex logic

Development Workflow
- Use virtual environments
- Follow Git branching strategy
- Use pre-commit hooks
- Implement CI/CD pipelines

Follow FastAPI documentation for best practices and patterns.
Use Python 3.9+ features when applicable.


Code Quality

-Strictly follow PEP 8 coding standards

-Use type hints and Pydantic models for data validation

-Control code complexity: a single function should not exceed 50 lines

-Use ruff and mypy for code quality checks

-All functions must have docstrings

Asynchronous Programming

-Default to asynchronous programming mode

-Use background tasks for long-running operations

-Utilize asyncio for concurrent operations

-Avoid synchronous blocking operations

-Use asynchronous control for browser interactions

Error Handling

-Use custom exception classes

-Implement a global exception handler

-Standardized error response format

-Detailed error logging

-Implement retry mechanisms for critical operations


Security Best Practices

Authentication & Authorization

-Use JWT for authentication

-Implement role-based access control (RBAC)

-Use OAuth2 for third-party authentication

-Implement API key management

-Ensure browser session security

Data Security

-Encrypt sensitive data storage

-Use environment variables for managing secrets

-Implement request rate limiting

-Prevent SQL injection and XSS attacks

-Secure browser automation operations

Performance Optimization

Database

-Use connection pooling

-Optimize query performance

-Implement database migrations

-Use appropriate indexing

-Support asynchronous database operations

Caching

-Use Redis for caching

-Implement cache invalidation strategies

-Cache frequently accessed data

-Prevent cache breakdowns

-Implement caching for LLM responses

Testing Standards

-Unit Testing

-Use pytest framework

-Maintain test coverage > 80%

-Mock external dependencies

-Use factory pattern for test data creation

-Simulate browser operations for testing

Integration Testing

-Test API endpoints

-Validate database operations

-Verify external service integrations

-Use test containers

-Implement end-to-end browser testing

Deployment & Monitoring

CI/CD

-Use GitHub Actions

-Automate testing and deployment

-Implement version management and releases

-Enforce code quality checks

-Build and manage container images

Monitoring

-Use Prometheus for metric collection

V-isualize data with Grafana dashboards

-Implement health checks

-Set up error alerting mechanisms

-Monitor browser automation performance

Documentation Standards

-API Documentation

-Follow OpenAPI standards

-Provide detailed API descriptions

-Include request and response examples

-Document error codes

-Support WebSocket API documentation

Code Documentation

-Write clear comments

-Include complete docstrings

Document architecture

-Provide deployment guidelines

-Maintain LLM prompt documentation

Development Workflow

Environment Management

-Use UV for virtual environment management

-Lock dependency versions

-Differentiate development and production environments

-Use Docker for containerization

-Require Python 3.11+

Version Control

-Follow Git Flow workflow

-Use semantic versioning

-Write clear commit messages

-Enforce code review processes

-Implement branch protection policies

Quality Control

-Use pre-commit hooks

-Automate code formatting

-Conduct static code analysis

-Perform performance benchmarking

Regularly update dependencies